<!doctype html>
<html>
<head>
<meta charset="utf-8">
<title>笨蛋鱼丸❤聪明狮子</title>

<!-- 引入背景音乐 -->
<audio id="background-music" loop muted autoplay>
  <source src="Always Online.mp3" type="audio/mpeg">
  Your browser does not support the audio element.
</audio>

<style>
html, body {
  height: 100%;
  padding: 0;
  margin: 0;
  background-color: black;
}
canvas {
  position: absolute;
  width: 100%;
  height: 100%;
}
</style>
</head>
<body>

<canvas id="pinkboard"></canvas>
<canvas id="stars"></canvas>

<script>
// 自动播放音乐
window.onload = function() {
  var music = document.getElementById('background-music');

  // 尝试取消静音并播放音乐
  function playMusic() {
    music.muted = false; // 取消静音
    music.play().then(function() {
      console.log('音乐开始播放');
    }).catch(function(error) {
      console.log('播放失败：', error);
      // 如果自动播放失败，提示用户点击页面
      alert('请点击页面以播放音乐');
      document.addEventListener('click', function() {
        music.play();
      });
    });
  }

  // 尝试播放音乐
  playMusic();

  // 原有代码
  init();
  for (var i = 0; i < starCount; i++) {
    var star = new Star();
    star.init();
    star.draw();
    arr.push(star);
  }
  for (var i = 0; i < rainCount; i++) {
    var rain = new MeteorRain();
    rain.init();
    rain.draw();
    rains.push(rain);
  }
  playStars();
  playRains();
};

// 原有代码
var context;
var arr = new Array();
var starCount = 800;
var rains = new Array();
var rainCount = 20;

function init() {
  var stars = document.getElementById('stars');
  windowWidth = window.innerWidth;
  stars.width = windowWidth;
  stars.height = window.innerHeight;
  context = stars.getContext('2d');
}

var Star = function() {
  this.x = windowWidth * Math.random();
  this.y = 5000 * Math.random();
  this.text = "❤";
  this.color = "#ea80b0";

  this.getColor = function() {
    var _r = Math.random();
    if (_r < 0.5) {
      this.color = "#333";
    } else {
      this.color = "#ea80b0";
    }
  };

  this.init = function() {
    this.getColor();
  };

  this.draw = function() {
    context.fillStyle = this.color;
    context.fillText(this.text, this.x, this.y);
  };
};

var MeteorRain = function() {
  this.x = -1;
  this.y = -1;
  this.length = -1;
  this.angle = 30;
  this.width = -1;
  this.height = -1;
  this.speed = 1;
  this.offset_x = -1;
  this.offset_y = -1;
  this.alpha = 1;
  this.color1 = "#ea80b0";
  this.color2 = "";

  this.init = function() {
    this.getPos();
    this.alpha = 1;
    this.getRandomColor();
    var x = Math.random() * 80 + 150;
    this.length = Math.ceil(x);
    this.angle = 30;
    x = Math.random() + 0.5;
    this.speed = Math.ceil(x);
    var cos = Math.cos(this.angle * 3.14 / 180);
    var sin = Math.sin(this.angle * 3.14 / 180);
    this.width = this.length * cos;
    this.height = this.length * sin;
    this.offset_x = this.speed * cos;
    this.offset_y = this.speed * sin;
  };

  this.getRandomColor = function() {
    var a = Math.ceil(255 - 240 * Math.random());
    this.color1 = "rgba(" + a + "," + a + "," + a + ",1)";
    this.color2 = "black";
  };

  this.countPos = function() {
    this.x = this.x - this.offset_x;
    this.y = this.y + this.offset_y;
  };

  this.getPos = function() {
    this.x = Math.random() * window.innerWidth;
    this.y = Math.random() * window.innerHeight;
  };

  this.draw = function() {
    context.save();
    context.beginPath();
    context.lineWidth = 1;
    context.globalAlpha = this.alpha;
    var line = context.createLinearGradient(this.x, this.y, this.x + this.width, this.y - this.height);
    line.addColorStop(0, "#ea80b0");
    line.addColorStop(0.3, this.color1);
    line.addColorStop(0.6, this.color2);
    context.strokeStyle = line;
    context.moveTo(this.x, this.y);
    context.lineTo(this.x + this.width, this.y - this.height);
    context.closePath();
    context.stroke();
    context.restore();
  };

  this.move = function() {
    var x = this.x + this.width - this.offset_x;
    var y = this.y - this.height;
    context.clearRect(x - 3, y - 3, this.offset_x + 5, this.offset_y + 5);
    this.countPos();
    this.alpha -= 0.002;
    this.draw();
  };
};

function playRains() {
  for (var n = 0; n < rainCount; n++) {
    var rain = rains[n];
    rain.move();
    if (rain.y > window.innerHeight) {
      context.clearRect(rain.x, rain.y - rain.height, rain.width, rain.height);
      rains[n] = new MeteorRain();
      rains[n].init();
    }
  }
  setTimeout("playRains()", 2);
}

function playStars() {
  for (var n = 0; n < starCount; n++) {
    arr[n].getColor();
    arr[n].draw();
  }
  setTimeout("playStars()", 100);
}

// 爱心粒子动画
var settings = {
  particles: {
    length: 500,
    duration: 2,
    velocity: 100,
    effect: -0.75,
    size: 20,
  },
};

(function() {
  var b = 0;
  var c = ["ms", "moz", "webkit", "o"];
  for (var a = 0; a < c.length && !window.requestAnimationFrame; ++a) {
    window.requestAnimationFrame = window[c[a] + "RequestAnimationFrame"];
    window.cancelAnimationFrame = window[c[a] + "CancelAnimationFrame"] || window[c[a] + "CancelRequestAnimationFrame"];
  }
  if (!window.requestAnimationFrame) {
    window.requestAnimationFrame = function(h, e) {
      var d = new Date().getTime();
      var f = Math.max(0, 16 - (d - b));
      var g = window.setTimeout(function() {
        h(d + f);
      }, f);
      b = d + f;
      return g;
    };
  }
  if (!window.cancelAnimationFrame) {
    window.cancelAnimationFrame = function(d) {
      clearTimeout(d);
    };
  }
})();

var Point = (function() {
  function Point(x, y) {
    this.x = (typeof x !== 'undefined') ? x : 0;
    this.y = (typeof y !== 'undefined') ? y : 0;
  }
  Point.prototype.clone = function() {
    return new Point(this.x, this.y);
  };
  Point.prototype.length = function(length) {
    if (typeof length == 'undefined')
      return Math.sqrt(this.x * this.x + this.y * this.y);
    this.normalize();
    this.x *= length;
    this.y *= length;
    return this;
  };
  Point.prototype.normalize = function() {
    var length = this.length();
    this.x /= length;
    this.y /= length;
    return this;
  };
  return Point;
})();

var Particle = (function() {
  function Particle() {
    this.position = new Point();
    this.velocity = new Point();
    this.acceleration = new Point();
    this.age = 0;
  }
  Particle.prototype.initialize = function(x, y, dx, dy) {
    this.position.x = x;
    this.position.y = y;
    this.velocity.x = dx;
    this.velocity.y = dy;
    this.acceleration.x = dx * settings.particles.effect;
    this.acceleration.y = dy * settings.particles.effect;
    this.age = 0;
  };
  Particle.prototype.update = function(deltaTime) {
    this.position.x += this.velocity.x * deltaTime;
    this.position.y += this.velocity.y * deltaTime;
    this.velocity.x += this.acceleration.x * deltaTime;
    this.velocity.y += this.acceleration.y * deltaTime;
    this.age += deltaTime;
  };
  Particle.prototype.draw = function(context, image) {
    function ease(t) {
      return (--t) * t * t + 1;
    }
    var size = image.width * ease(this.age / settings.particles.duration);
    context.globalAlpha = 1 - this.age / settings.particles.duration;
    context.drawImage(image, this.position.x - size / 2, this.position.y - size / 2, size, size);
  };
  return Particle;
})();

var ParticlePool = (function() {
  var particles,
    firstActive = 0,
    firstFree = 0,
    duration = settings.particles.duration;

  function ParticlePool(length) {
    particles = new Array(length);
    for (var i = 0; i < particles.length; i++)
      particles[i] = new Particle();
  }
  ParticlePool.prototype.add = function(x, y, dx, dy) {
    particles[firstFree].initialize(x, y, dx, dy);
    firstFree++;
    if (firstFree == particles.length) firstFree = 0;
    if (firstActive == firstFree) firstActive++;
    if (firstActive == particles.length) firstActive = 0;
  };
  ParticlePool.prototype.update = function(deltaTime) {
    var i;
    if (firstActive < firstFree) {
      for (i = firstActive; i < firstFree; i++)
        particles[i].update(deltaTime);
    }
    if (firstFree < firstActive) {
      for (i = firstActive; i < particles.length; i++)
        particles[i].update(deltaTime);
      for (i = 0; i < firstFree; i++)
        particles[i].update(deltaTime);
    }
    while (particles[firstActive].age >= duration && firstActive != firstFree) {
      firstActive++;
      if (firstActive == particles.length) firstActive = 0;
    }
  };
  ParticlePool.prototype.draw = function(context, image) {
    if (firstActive < firstFree) {
      for (i = firstActive; i < firstFree; i++)
        particles[i].draw(context, image);
    }
    if (firstFree < firstActive) {
      for (i = firstActive; i < particles.length; i++)
        particles[i].draw(context, image);
      for (i = 0; i < firstFree; i++)
        particles[i].draw(context, image);
    }
  };
  return ParticlePool;
})();

(function(canvas) {
  var context = canvas.getContext('2d'),
    particles = new ParticlePool(settings.particles.length),
    particleRate = settings.particles.length / settings.particles.duration,
    time;

  function pointOnHeart(t) {
    return new Point(
      160 * Math.pow(Math.sin(t), 3),
      130 * Math.cos(t) - 50 * Math.cos(2 * t) - 20 * Math.cos(3 * t) - 10 * Math.cos(4 * t) + 25
    );
  }

  var image = (function() {
    var canvas = document.createElement('canvas'),
      context = canvas.getContext('2d');
    canvas.width = settings.particles.size;
    canvas.height = settings.particles.size;

    function to(t) {
      var point = pointOnHeart(t);
      point.x = settings.particles.size / 2 + point.x * settings.particles.size / 350;
      point.y = settings.particles.size / 2 - point.y * settings.particles.size / 350;
      return point;
    }

    context.beginPath();
    var t = -Math.PI;
    var point = to(t);
    context.moveTo(point.x, point.y);
    while (t < Math.PI) {
      t += 0.01;
      point = to(t);
      context.lineTo(point.x, point.y);
    }
    context.closePath();
    context.fillStyle = '#ea80b0';
    context.fill();
    var image = new Image();
    image.src = canvas.toDataURL();
    return image;
  })();

  function render() {
    requestAnimationFrame(render);
    var newTime = new Date().getTime() / 1000,
      deltaTime = newTime - (time || newTime);
    time = newTime;
    context.clearRect(0, 0, canvas.width, canvas.height);
    var amount = particleRate * deltaTime;
    for (var i = 0; i < amount; i++) {
      var pos = pointOnHeart(Math.PI - 2 * Math.PI * Math.random());
      var dir = pos.clone().length(settings.particles.velocity);
      particles.add(canvas.width / 2 + pos.x, canvas.height / 2 - pos.y, dir.x, -dir.y);
    }
    particles.update(deltaTime);
    particles.draw(context, image);
  }

  function onResize() {
    canvas.width = canvas.clientWidth;
    canvas.height = canvas.clientHeight;
  }
  window.onresize = onResize;

  setTimeout(function() {
    onResize();
    render();
  }, 10);
})(document.getElementById('pinkboard'));

</script>

</body>
</html>
